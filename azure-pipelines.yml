trigger:
- master

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'shasbDockerHub'
  imageRepository: 'shashankbarsin/bootcamp-demo'
  dockerfilePath: '**/app/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Kubernetes Namespace
  aksk8sNamespace: 'aksnamespace'
  gkek8sNamespace: 'gkenamespace'
  eksk8sNamespace: 'eksnamespace'
  openshiftproject: 'openshiftproject'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build job
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'manifests'
        targetPath: 'manifests'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: DeployToAKS
    displayName: Deploy to AKS
    pool:
      vmImage: $(vmImageName)
    environment: 'shasb.aksnamespace'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(aksk8sNamespace)
              manifests: |
                $(System.ArtifactsDirectory)/manifests/*
              containers: |
                $(imageRepository):$(tag)
  - deployment: DeployToGKE
    displayName: Deploy to GKE
    pool:
      vmImage: $(vmImageName)
    environment: 'shasb.gkenamespace'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(gkek8sNamespace)
              manifests: |
                $(System.ArtifactsDirectory)/manifests/*
              containers: |
                $(imageRepository):$(tag)
  - deployment: DeployToEKS
    displayName: Deploy to EKS
    pool:
      vmImage: $(vmImageName)
    environment: 'shasb.eksnamespace'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(eksk8sNamespace)
              manifests: |
                $(System.ArtifactsDirectory)/manifests/*
              containers: |
                $(imageRepository):$(tag)
  - deployment: DeployToOpenshift
    displayName: Deploy to Openshift
    pool:
      vmImage: $(vmImageName)
    environment: 'shasb.openshiftproject'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'
          - task: Kubernetes@1
            inputs:
              command: 'get'
              namespace: $(openshiftproject)
              arguments: 'pods --insecure-skip-tls-verify'
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(openshiftproject)
              manifests: |
                $(System.ArtifactsDirectory)/manifests/*
              containers: |
                $(imageRepository):$(tag)
